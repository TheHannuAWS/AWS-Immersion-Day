AWSTemplateFormatVersion: "2010-09-09"

Description: Create Amazon EKS - Graviton2 Node Group

Mappings:
  ServicePrincipals:
    aws-cn:
      ec2: ec2.amazonaws.com.cn
    aws:
      ec2: ec2.amazonaws.com

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
          - ClusterControlPlaneSecurityGroup
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - KeyName
          - NodeInstanceType
          - NodeImageIdSSMParam
          - NodeImageId
          - NodeVolumeSize
          - BootstrapArguments
      - Label:
          default: Worker Network Configuration
        Parameters:
          - VpcId
          - PrimarySubnets
      - Label:
          default: Multus CNI Configuration
        Parameters:
          - MultusSubnets
          - MultusSecurityGroupIds
          - LambdaS3Bucket
          - LambdaS3Key

Parameters:
  BootstrapArguments:
    Type: String
    Default: "--kubelet-extra-args '--node-labels=is_worker=true'"
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  ClusterControlPlaneSecurityGroup:
    Type: "AWS::EC2::SecurityGroup::Id"
    Description: The security group of the cluster control plane.

  ClusterName:
    Type: String
    Description: The EKS cluster name provided when the cluster was created with infrastructure stack. Check from CloudFormation, EKS service or AWS CLI

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: ee-default-keypair
    Description: Existing key pair, which allows you to SSH your EKS worker(s)

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired capacity of EKS Node Group Auto Scaling Group (ASG)

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 3
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG

  NodeGroupName:
    Type: String
    Default: gv2-multus-ng1
    Description: Unique identifier for the Node Group

  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.21/amazon-linux-2-arm64/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the GV2 worker node instances. EKS version 1.21

  NodeInstanceType:
    Type: String
    Default: m6g.medium
    AllowedValues:
      - m6g.medium
      - m6g.large
      - m6g.xlarge
      - c6g.large
      - c6g.xlarge
      - t4g.medium
      - t4g.xlarge
      
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances - only Graviton2 (arm64) supported

  NodeVolumeSize:
    Type: Number
    Default: 40
    Description: Worker Node Boot Volume Size (EBS)

  PrimarySubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The primary subnet for worker node(s) - eth0 - choose one from AZ1 on this workshop

  MultusSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The List of Multus subnets from where Multus secondary ENI's will be connected to - choose two from AZ1 on this workshop

  MultusSecurityGroupIds:
    Type: "List<AWS::EC2::SecurityGroup::Id>"
    Description: The security groups of the Multus Network Interfaces.
  
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC of the worker instances - choose one created with Infra Stack

  LambdaS3Bucket:
    Type: String
    Description: Specify S3 Bucket your created where you copied Lambda Function. Just bucket name.

  LambdaS3Key:
    Type: String
    Default: lambda_function.zip
    Description: Specify S3 filename of your Lambda Function (lambda_function.zip)

Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
        - Ref: NodeImageId
        - ""

Resources:
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [ServicePrincipals, !Ref "AWS::Partition", ec2]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSCloudFormationFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: /

# NodeRole for EC2 API Call
  Ec2ApiAccessPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: NodeInstanceRole
    Properties:
      PolicyName: Ec2ApiAccessPolicy
      Roles: [
          !Ref NodeInstanceRole
        ]
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: [
                "ec2:AssignPrivateIpAddresses",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeSubnets",
                "ec2:ModifyInstanceAttribute"
              ]
              Resource: "*"

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId: !Ref VpcId

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      ToPort: 443

  NodeLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: "false"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - HasNodeImageId
        - Ref: NodeImageId
        - Ref: NodeImageIdSSMParam
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: NodeSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
          /opt/aws/bin/cfn-signal --exit-code $? \
                   --stack  ${AWS::StackName} \
                   --resource NodeGroup  \
                   --region ${AWS::Region}
          echo "net.ipv4.conf.default.rp_filter = 0" | tee -a /etc/sysctl.conf
          echo "net.ipv4.conf.all.rp_filter = 0" | tee -a /etc/sysctl.conf
          sudo sysctl -p
          sleep 45
          ls /sys/class/net/ > /tmp/ethList;cat /tmp/ethList |while read line ; do sudo ifconfig $line up; done
          grep eth /tmp/ethList |while read line ; do echo "ifconfig $line up" >> /etc/rc.d/rc.local; done
          systemctl enable rc-local
          chmod +x /etc/rc.d/rc.local

  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: !Sub ${ClusterName}-${NodeGroupName}-Node
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          PropagateAtLaunch: "true"
          Value: owned
      VPCZoneIdentifier: !Ref PrimarySubnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M
# End of NodeGroup Creation

# LifeCycleHook for AutoScalingGroup (NodeGroup)
  LchookEc2Ins:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref NodeGroup
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
      DefaultResult: "ABANDON"
      HeartbeatTimeout: "300"
  LchookEc2Term:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref NodeGroup
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      DefaultResult: "ABANDON"
      HeartbeatTimeout: "300"

# Lambda Creation
  RoleLambdaAttach2ndEniCfn:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
  PolicyLambdaAttach2ndEniCfn:
    Type: "AWS::IAM::Policy"
    DependsOn: RoleLambdaAttach2ndEniCfn
    Properties:
      PolicyName: LambdaAttach2ndEniCfn
      Roles: [
          !Ref RoleLambdaAttach2ndEniCfn
        ]
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeInstances",
                "ec2:DetachNetworkInterface",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:DescribeSubnets",
                "autoscaling:CompleteLifecycleAction",
                "ec2:DeleteTags",
                "ec2:DescribeNetworkInterfaces",
                "ec2:CreateTags",
                "ec2:DeleteNetworkInterface",
                "ec2:AttachNetworkInterface",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:TerminateInstances"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ]
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action: "logs:CreateLogGroup"
              Resource: "arn:aws:logs:*:*:*"

  LambdaAttach2ndENI:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: "python3.8"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt RoleLambdaAttach2ndEniCfn.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Timeout: "60"
      Environment:
        Variables:
          SubnetIds: !Join [ ",", !Ref MultusSubnets ]
          SecGroupIds:  !Join [ ",", !Ref MultusSecurityGroupIds ]
# End of Lambda

# CloudWatch Event Trigger
  NewInstanceEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance-launch Lifecycle Action"
          - "EC2 Instance-terminate Lifecycle Action"
        detail:
          AutoScalingGroupName:
            - !Ref NodeGroup
      Targets:
        -
          Arn: !GetAtt LambdaAttach2ndENI.Arn
          Id: Lambda1
  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaAttach2ndENI"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "NewInstanceEventRule"
          - "Arn"

  LambdaReStartFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json
          import cfnresponse
          asg_client = boto3.client('autoscaling')
          ec2_client = boto3.client('ec2')

          def handler (event, context):
              AutoScalingGroupName = event['ResourceProperties']['AsgName']
              asg_response = asg_client.describe_auto_scaling_groups(AutoScalingGroupNames=[AutoScalingGroupName])
              instance_ids = []

              for i in asg_response['AutoScalingGroups']:
                for k in i['Instances']:
                  instance_ids.append(k['InstanceId'])

              if instance_ids != []:
                ec2_client.terminate_instances(
                  InstanceIds = instance_ids
                )
              responseValue = 1
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

      Handler: index.handler
      Runtime: "python3.8"
      Timeout: "60"
      Role: !GetAtt RoleLambdaAttach2ndEniCfn.Arn

  CustomResource:
    Type: Custom::CustomResource
    DependsOn: NodeGroup
    Properties:
      ServiceToken: !GetAtt 'LambdaReStartFunction.Arn'
      AsgName: !Ref NodeGroup

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
